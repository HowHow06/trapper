from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel


# Shared properties
class VulnerabilityBase(BaseModel):
    name: Optional[str]
    description: Optional[str]
    type_id: Optional[int]
    patch_suggestion: Optional[str]
    severity_level_id: Optional[int]


# Properties to receive via API on creation
class VulnerabilityCreate(VulnerabilityBase):
    id: Optional[int]
    name: str
    description: str
    type_id: int
    severity_level_id: int


# Properties to receive via API on update
class VulnerabilityUpdate(VulnerabilityBase):
    pass


class VulnerabilityInDBBase(VulnerabilityBase):
    id: int
    name: str
    description: str
    type_id: int
    patch_suggestion: str
    severity_level_id: int

    class Config:  # A special class that is used to configure the behavior of the Pydantic model
        orm_mode = True  # A configuration option for Pydantic that enables ORM mode, able to read the data directly from SQLAlchemy models, mainly to validate the response model


# Properties to return to client as RESPONSE
class Vulnerability(VulnerabilityInDBBase):
    pass


# Properties properties stored in DB
class VulnerabilityInDB(VulnerabilityInDBBase):
    pass
